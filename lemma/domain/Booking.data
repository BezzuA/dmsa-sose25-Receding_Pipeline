context Booking {
    structure Booking<aggregate, entity> {
        long id<identifier>,
        long userId,
        long stationId,
        datetime startTime,
        datetime endTime,
        double amount,
        BookingStatus status = BookingStatus.PENDING
    }

    enum BookingStatus {
        PENDING,
        APPROVED,
        IN_USE,
        COMPLETED,
        CANCELLED,
        FAILED
    }

    collection Bookings { Booking b }
    collection StationIds { long id }         

    structure BookingManagementService<service> {
        function Bookings  getAllBookings(),
        function Booking   getBooking(long id),
        function Booking   createBooking(Booking booking),
        procedure          cancelBooking(long id),
        function Booking   approveBooking(long id),
        function Booking   startBooking(long id),
        function Booking   completeBooking(long id),
        function Bookings  getBookingsByUserId(long userId),
        function Bookings  getAvailableStations(datetime start, datetime end),
        function Booking   bookStation(API::BookingRequestDto request),
        function Bookings  getBookingsByStationIds(StationIds ids),
        function boolean   isStationInUse(long stationId),
        procedure          autoUpdateBookingStatuses                
    }
}

context API {

    // JSON payload for POST /api/bookings/book
    structure BookingRequestDto<valueObject> {
        long     userId,
        long     stationId,
        datetime startTime,
        datetime endTime,
        double   amount
    }

    // Lightweight projection of a charging station returned by
    // GET /api/bookings/available
    structure ChargingDto<valueObject> {
        long     id,
        string   name,
        double   pricePerMinute,
        double   latitude,
        double   longitude,
        long     ownerId,
        datetime availableFrom,
        datetime availableUntil
    }
}

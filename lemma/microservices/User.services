import datatypes  from "../domain/User.data"           as UserDomain
import technology from "../technology/JavaSpring.technology"  as JavaSpring
import technology from "../technology/Protocols.technology"   as Protocols

@technology(JavaSpring)
@technology(Protocols)
@sync(Protocols::_protocols.rest)
public functional microservice com.parkandcharge.userservice.UserService {

    // Base URI prefix: /api/users
    @endpoints(Protocols::_protocols.rest: "/api/users";)
    interface UsersApi {

        
        @endpoints(Protocols::_protocols.rest: "/signup";)
        @JavaSpring::_aspects.PostMapping
        signup(
            @JavaSpring::_aspects.RequestBody
            sync in  request : UserDomain::API.RegisterRequest,

            sync out user    : UserDomain::User.UserAccount
        );

        @endpoints(Protocols::_protocols.rest: "/signin";)
        @JavaSpring::_aspects.PostMapping
        signin(
            @JavaSpring::_aspects.RequestBody
            sync in  credentials : UserDomain::API.AuthRequest,

            sync out user        : UserDomain::User.UserAccount
        );

        @endpoints(Protocols::_protocols.rest: "/{id}";)
        @JavaSpring::_aspects.PutMapping
        updateUser(
            @JavaSpring::_aspects.PathVariable
            sync in  id      : long,

            @JavaSpring::_aspects.RequestBody
            sync in  user    : UserDomain::User.UserAccount,

            sync out updated : UserDomain::User.UserAccount
        );

        ---
        List all users
        ---
        @JavaSpring::_aspects.GetMapping
        getAllUsers(
            sync out users : UserDomain::User.Users
        );

        ---
        Get user by ID
        @required id  User ID
        ---
        @endpoints(Protocols::_protocols.rest: "/{id}";)
        @JavaSpring::_aspects.GetMapping
        getUser(
            @JavaSpring::_aspects.PathVariable
            sync in  id   : long,

            sync out user : UserDomain::User.UserAccount
        );

        @JavaSpring::_aspects.PostMapping
        createUser(
            @JavaSpring::_aspects.RequestBody
            sync in  request : UserDomain::API.RegisterRequest,

            sync out user    : UserDomain::User.UserAccount
        );

        ---
        Delete user
        @required id  User ID
        ---
        @endpoints(Protocols::_protocols.rest: "/{id}";)
        @JavaSpring::_aspects.DeleteMapping
        deleteUser(
            @JavaSpring::_aspects.PathVariable
            sync in id : long
        );

        @endpoints(Protocols::_protocols.rest: "/{id}/balance";)
        @JavaSpring::_aspects.GetMapping
        getBalance(
            @JavaSpring::_aspects.PathVariable
            sync in  id       : long,

            sync out balance  : double
        );

        @endpoints(Protocols::_protocols.rest: "/{id}/topup";)
        @JavaSpring::_aspects.PostMapping
        topUp(
            @JavaSpring::_aspects.PathVariable
            sync in  id      : long,

            @JavaSpring::_aspects.RequestParam
            sync in  amount  : double,

            sync out balance : double
        );

        @endpoints(Protocols::_protocols.rest: "/{id}/deduct";)
        @JavaSpring::_aspects.PostMapping
        deductBalance(
            @JavaSpring::_aspects.PathVariable
            sync in id     : long,

            @JavaSpring::_aspects.RequestParam
            sync in amount : double
        );

        @endpoints(Protocols::_protocols.rest: "/{userId}/add";)
        @JavaSpring::_aspects.PostMapping
        addBalance(
            @JavaSpring::_aspects.PathVariable
            sync in userId : long,

            @JavaSpring::_aspects.RequestParam
            sync in amount : double
        );
    }
}
